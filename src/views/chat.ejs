<%- contentFor('body') %>

<div class="mx-auto mt-4  ">
    <div class="bg-white/50 dark:bg-gray-950/30 bg-gradient-to-b from-indigo-500/30 via-blue-600/30 to-sky-600/30
     shadow-md rounded-lg overflow-hidden">
        <div class="flex flex-col sm:flex-row">
            <!-- Lista de amigos -->
            <div id="friendsList" class="w-full sm:w-1/3 border-b sm:border-b-0 sm:border-r ">
                <h2 class="text-lg dark:text-gray-100 font-semibold p-4 border-b">Amigos</h2>
                <ul class="divide-y divide-gray-200">
                    <% friends.forEach(friend => { %>
                        <li class="hover:bg-gray-50/50 dark:hover:bg-indigo-600/20 transition duration-150 ease-in-out cursor-pointer"
                            onclick="loadChat('<%= friend.friend.id %>', '<%= friend.friend.username %>', '<%= friend.friend.profilePicture || '/uploads/default.png' %>')">
                            <div class="flex items-center px-4 py-3">
                                <img src="<%= friend.friend.profilePicture || '/uploads/default.png' %>" 
                                     alt="<%= friend.friend.username %>'s profile picture" 
                                     class="w-10 h-10 rounded-full mr-3">
                                <span class="text-gray-700  dark:text-gray-100 font-medium"><%= friend.friend.username %></span>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            </div>

            <!-- Área de chat -->
            <div id="chatArea" class="w-full sm:w-2/3 flex flex-col h-[calc(99vh-8rem)] sm:h-[600px] hidden">
            <!-- <div id="chatArea" class="w-full sm:w-2/3 flex flex-col h-[calc(100vh-8rem)]  hidden"> -->
                <div id="chatHeader" class="p-4 border-b flex items-center justify-between">
                    <h2 class="text-lg font-semibold dark:text-gray-100">Chat con <span id="chatFriendName" class="text-blue-500"></span></h2>
                    <button id="backToFriends" class="sm:hidden text-blue-500 hover:text-blue-700">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                        </svg>
                    </button>
                </div>
                <div id="messagesList" class="flex-grow overflow-y-auto p-4"></div>
                <form id="messageForm" class="border-t p-4">
                  <div class="flex">
                      <input type="text" id="messageInput" class="flex-grow border rounded-l-full py-2 px-4 placeholder-gray-500 focus:outline-none" placeholder="Escribe tu mensaje...">
                      <button type="submit" class="bg-blue-500 text-white rounded-r-full p-2 flex items-center justify-center hover:bg-blue-600 transition duration-150 ease-in-out">
                          <!-- Icono SVG de un avión de papel -->
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 md:h-6 md:w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l18-9-7 16-2-7-7-2z" />
                          </svg>
                      </button>
                  </div>
              </form>
              
            </div>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const userId = '<%= userId %>';
    let currentChatId = null;
    let currentUserProfilePicture = '<%= currentUser.profilePicture %>';

    socket.on('connect', () => {
        console.log('Conectado a Socket.IO');
        socket.emit('join chat', userId);
    });

    function loadChat(friendId, friendName, friendProfilePicture) {
        if (currentChatId) {
            socket.emit('leave chat', currentChatId);
        }
        currentChatId = friendId;
        socket.emit('join chat', currentChatId);

        document.getElementById('chatFriendName').textContent = friendName;
        document.getElementById('chatArea').classList.remove('hidden');
        
        // En dispositivos móviles, oculta la lista de amigos y muestra el chat
        if (window.innerWidth < 640) {
            document.getElementById('friendsList').classList.add('hidden');
            document.getElementById('chatArea').classList.remove('hidden');
        }

        fetch(`/chat/messages/${friendId}`)
            .then(response => response.json())
            .then(messages => {
                const messagesList = document.getElementById('messagesList');
                messagesList.innerHTML = '';
                messages.forEach(message => appendMessage(message, friendName, friendProfilePicture));
                messagesList.scrollTop = messagesList.scrollHeight;
            })
            .catch(error => console.error('Error al cargar mensajes:', error));
    }

    function appendMessage(message, friendName, friendProfilePicture) {
        const messagesList = document.getElementById('messagesList');
        const messageElement = document.createElement('div');
        messageElement.classList.add('mb-4');
        
        const isSentByUser = message.senderId.toString() === userId;
        const profilePicture = isSentByUser ? currentUserProfilePicture : friendProfilePicture;
        const username = isSentByUser ? 'Tú' : friendName;

        messageElement.innerHTML = `
            <div class="flex ${isSentByUser ? 'justify-end' : 'justify-start'}">
                <div class="flex ${isSentByUser ? 'flex-row-reverse' : 'flex-row'} items-end">
                    <img src="${profilePicture}" alt="${username}" class="w-8 h-8 rounded-full ${isSentByUser ? 'ml-2' : 'mr-2'}">
                    <div class="${isSentByUser ? 'bg-blue-500 text-white' : 'bg-gray-100'} rounded-lg px-4 py-2 max-w-xs">
                        <p class="text-sm">${message.content}</p>
                    </div>
                </div>
            </div>
            <div class="text-xs text-gray-500 dark:text-gray-200 mt-1 ${isSentByUser ? 'text-right' : 'text-left'}">
                ${new Date(message.created_at).toLocaleString()}
            </div>
        `;
        messagesList.appendChild(messageElement);
        messagesList.scrollTop = messagesList.scrollHeight;
    }

    document.getElementById('messageForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const messageInput = document.getElementById('messageInput');
        const content = messageInput.value.trim();
        
        if (content && currentChatId) {
            console.log('Enviando mensaje:', { recipientId: currentChatId, content });
            socket.emit('send message', { recipientId: currentChatId, content });
            messageInput.value = '';
        }
    });

    socket.on('new message', (message) => {
        console.log('Nuevo mensaje recibido:', message);
        if (message.senderId.toString() === currentChatId || message.senderId.toString() === userId) {
            const friendInfo = Array.from(document.getElementById('friendsList').querySelectorAll('li'))
                .find(li => li.onclick.toString().includes(message.senderId.toString() === userId ? message.recipientId : message.senderId));
            
            if (friendInfo) {
                const friendName = friendInfo.querySelector('span').textContent;
                const friendProfilePicture = friendInfo.querySelector('img').src;
                appendMessage(message, friendName, friendProfilePicture);
            }
        }
    });

    socket.on('message error', (error) => {
        console.error('Error al enviar mensaje:', error);
        // Aquí puedes agregar una notificación visual para el usuario si lo deseas
    });

    // Manejar el botón de "volver" en dispositivos móviles
    document.getElementById('backToFriends').addEventListener('click', function() {
        document.getElementById('friendsList').classList.remove('hidden');
        document.getElementById('chatArea').classList.add('hidden');
    });

    // Ajustar el diseño cuando cambia el tamaño de la ventana
    window.addEventListener('resize', function() {
        if (window.innerWidth >= 640) {
            document.getElementById('friendsList').classList.remove('hidden');
            if (currentChatId) {
                document.getElementById('chatArea').classList.remove('hidden');
            }
        }
    });
</script>